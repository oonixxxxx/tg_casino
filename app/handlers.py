from aiogram import F, Router, types, Bot

from aiogram.filters import CommandStart
from aiogram.types import Message
from aiogram.enums import ParseMode

from oth.buttons import Buttons
from oth.text import menu_text
from config import TG_BOT_TOKEN

router = Router()
bot = Bot(TG_BOT_TOKEN, parse_mode=ParseMode.HTML)

class Constanse:
    bank = 1_000_000


def get_combo_text(dice_value: int):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ, —á—Ç–æ –±—ã–ª–æ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –¥–∞–π—Å–µ-–∫–∞–∑–∏–Ω–æ
    :param dice_value: –∑–Ω–∞—á–µ–Ω–∏–µ –¥–∞–π—Å–∞ (—á–∏—Å–ª–æ)
    :return: –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –≤—Å–µ –≤—ã–ø–∞–≤—à–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞
    –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç (–µ—â—ë —Ä–∞–∑ —Å–ø–∞—Å–∏–±–æ t.me/svinerus):
    return [casino[(dice_value - 1) // i % 4]for i in (1, 4, 16)]
    """
    #           0        1          2       3
    values = ["BAR", "–≤–∏–Ω–æ–≥—Ä–∞–¥", "–ª–∏–º–æ–Ω", "—Å–µ–º—å"]

    dice_value -= 1
    result = []
        
    for _ in range(3):
        result.append(values[dice_value % 4])
        dice_value //= 4
        
    return result


@router.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    await message.answer(f"Hello! –Ø –±–æ—Ç –¥–ª–ª—è –ø—Ä–æ–¥–∞–∂–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –º–∞–≥–∞–∑–∏–Ω–µ \n —á—Ç–æ –±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞ –Ω–∞–ø–∏—à–∏ '–ö–æ—Ä–∑–∏–Ω–∞ üõí'", 
                         reply_markup=Buttons.menu_button)


@router.message(F.text == '–í –º–µ–Ω—éüßëüèø‚ÄçüíªüóÇ')
async def get_menu(message: Message):
    await message.answer(str(menu_text), reply_markup=Buttons.menu_button)


@router.message(F.text == 'spin')
async def roll_dice(message: types.Message):
    data = await bot.send_dice(message.chat.id, emoji='üé∞')
    result = get_combo_text(data.dice.value)
    Constanse.bank -= 1000
    await bot.send_message(message.chat.id, f'–∑–Ω–∞—á–µ–Ω–∏–µ —Å–ª–æ—Ç—ã {result},\n–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {Constanse.bank}$')
    

@router.message(F.text == 'bank')
async def get_my_bank(message: types.Message):
    await bot.send_message(message.chat.id, f'–í–∞—à –±–∞–ª–∞–Ω—Å: {Constanse.bank}$')


@router.message(F.text == 'add million')
async def add_million(message: types.Message):
    await bot.send_message(message.chat.id, f'–í–∞—à –±–∞–ª–∞–Ω—Å: {Constanse.bank + 1_000_000}$')
    Constanse.bank += 1_000_000


@router.message(F.text == 'test spin')
async def test_spin(message: types.Message):
    await bot.send_message(message.chat.id, f'–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–∫—Ä—É—Ç —Å–æ–≤–µ—Ä—à–µ–Ω. –í–∞—à –±–∞–ª–∞–Ω—Å {Constanse.bank - 1000}$')
    Constanse.bank -= 1000
    
    
@router.message(F.text == 'reset bank')
async def reset_bank(message: types.Message):
    Constanse.bank = 0
    await bot.send_message(message.chat.id, f'–í–∞—à –±–∞–ª–∞–Ω—Å: {Constanse.bank}$')